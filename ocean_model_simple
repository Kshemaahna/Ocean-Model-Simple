import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
import os
import subprocess
import platform
import imageio.v2 as imageio
from tqdm import trange
import argparse

# Physical constants
g = 9.81
f0 = 1e-4
beta = 2e-11
rho_air = 1.225
rho0 = 1025.0
rho_strat = np.linspace(rho0, rho0 + 2, 10)
Cd = 0.001
wind_speed = 10
base_wind_stress = 0.0013 * rho_air * wind_speed**2
Ah = 20
Av = 0.5

# Grid
nx, ny, nz = 100, 100, 10
lat0, lat1 = 30, 35
lon0, lon1 = -130, -125
depth = 1000.0
dz = depth / nz
dt = 2.0
nt = 200

lat = np.linspace(lat0, lat1, ny)
lon = np.linspace(lon0, lon1, nx)
z = np.linspace(-dz/2, -depth + dz/2, nz)
dx = dy = 111e3 * (lat[1] - lat[0])

# Output paths
netcdf_sim_path = "output_3d_simulation.nc" #data
out_path = "output_3d_surface_currents.png" #visualizations
gif_path = "surface_currents.gif"
mp4_path = "surface_currents.mp4"

avg_speed = "avg_speed.png"

# Utility

def open_file(path):
    system = platform.system()
    try:
        if system == "Windows":
            os.startfile(path)
        elif system == "Darwin":
            subprocess.run(["open", path])
        else:
            subprocess.run(["xdg-open", path])
    except Exception as e:
        print(f"Failed to open {path}: {e}")

# Derivatives

def d_dx(field):
    return (np.roll(field, -1, axis=0) - np.roll(field, 1, axis=0)) / (2 * dx)

def d_dy(field):
    return (np.roll(field, -1, axis=1) - np.roll(field, 1, axis=1)) / (2 * dy)

def laplacian(field, axis):
    delta = dx if axis < 2 else dz
    return (np.roll(field, 1, axis) - 2 * field + np.roll(field, -1, axis)) / delta**2

# Simulation core and visualizations output

def run_3d_simulation(nc_path=None, animate=True):
    Y = (lat - np.mean(lat)) * 111e3
    f_line = f0 + beta * Y
    f = np.tile(f_line[:, None], (1, nx)).T

    if nc_path and os.path.exists(nc_path):
        ds = xr.open_dataset(nc_path, engine="scipy")
        sub = ds['elevation'].sel(lat=slice(lat0, lat1), lon=slice(lon0, lon1))
        b = sub.values.astype(np.float64)
    else:
        b = -depth + 200 * np.sin(np.linspace(0, 2*np.pi, nx))[:, None] * np.cos(np.linspace(0, 2*np.pi, ny))[None, :]

    mask = np.ones((nx, ny, nz), dtype=bool)
    for k in range(nz):
        mask[:, :, k] = z[k] >= b

    u = np.zeros((nx, ny, nz))
    v = np.zeros((nx, ny, nz))
    w = np.zeros((nx, ny, nz))
    p = np.zeros((nx, ny, nz))
    rho = np.zeros((nx, ny, nz))

    for k in range(nz):
        rho[:, :, k] = rho_strat[k]
        p[:, :, k] = rho_strat[k] * g * (-z[k])

    np.random.seed(42)
    u += 1e-4 * np.random.randn(nx, ny, nz)
    v += 1e-4 * np.random.randn(nx, ny, nz)

    gif_frames = []
    mp4_writer = imageio.get_writer(mp4_path, fps=3) if animate else None

    for t in trange(nt, desc="Simulating"):
        current_wind_stress = base_wind_stress * (1 + 0.5 * np.sin(2 * np.pi * t / nt))

        for k in range(nz - 2, -1, -1):
            p[:, :, k] = p[:, :, k + 1] + g * 0.5 * (rho[:, :, k] + rho[:, :, k + 1]) * dz

        dp_dx = d_dx(p)
        dp_dy = d_dy(p)

        for k in range(nz):
            speed = np.sqrt(u[:, :, k]**2 + v[:, :, k]**2) + 1e-10
            u[:, :, k] += dt * (-dp_dx[:, :, k]/rho[:, :, k] + f * v[:, :, k] - Cd * u[:, :, k] * speed + Ah * (laplacian(u[:, :, k], 0) + laplacian(u[:, :, k], 1)))
            v[:, :, k] += dt * (-dp_dy[:, :, k]/rho[:, :, k] - f * u[:, :, k] - Cd * v[:, :, k] * speed + Ah * (laplacian(v[:, :, k], 0) + laplacian(v[:, :, k], 1)))

        for k in range(1, nz - 1):
            u[:, :, k] += dt * Av * (u[:, :, k+1] - 2*u[:, :, k] + u[:, :, k-1]) / dz**2
            v[:, :, k] += dt * Av * (v[:, :, k+1] - 2*v[:, :, k] + v[:, :, k-1]) / dz**2

        u[:, :, 0] += dt * (current_wind_stress / rho[:, :, 0] / dz)

        for field in [u, v]:
            field[0, :, :] = field[1, :, :]
            field[-1, :, :] = field[-2, :, :]
            field[:, 0, :] = field[:, 1, :]
            field[:, -1, :] = field[:, -2, :]

        u[~mask] = 0
        v[~mask] = 0

        div = d_dx(u) + d_dy(v)
        w[:, :, 0] = 0
        for k in range(1, nz):
            w[:, :, k] = w[:, :, k - 1] - dz * div[:, :, k - 1]

        if animate and t % 10 == 0:
            speed_mag = np.sqrt(u[:, :, 0]**2 + v[:, :, 0]**2)
            fig, ax = plt.subplots(figsize=(7, 5))
            im = ax.pcolormesh(lon, lat, speed_mag.T, shading='auto', cmap='viridis')
            ax.quiver(lon, lat, u[:, :, 0].T, v[:, :, 0].T, scale=10, color='white')
            plt.colorbar(im, ax=ax, label='Speed (m/s)')
            plt.title(f"Surface Currents (t={t})")
            plt.xlabel("Longitude")
            plt.ylabel("Latitude")
            plt.tight_layout()
            plt.savefig("_temp_frame.png")
            image = imageio.imread("_temp_frame.png")
            gif_frames.append(image)
            mp4_writer.append_data(image)
            plt.close()

    if animate:
        imageio.mimsave(gif_path, gif_frames, fps=3)
        mp4_writer.close()
        os.remove("_temp_frame.png")

    ds_out = xr.Dataset(
        {
            'u': (['lon', 'lat', 'z'], u),
            'v': (['lon', 'lat', 'z'], v),
            'w': (['lon', 'lat', 'z'], w),
            'p': (['lon', 'lat', 'z'], p),
            'rho': (['lon', 'lat', 'z'], rho),
            'mask': (['lon', 'lat', 'z'], mask),
        },
        coords={
            'lon': lon,
            'lat': lat,
            'z': z,
        }
    )
    ds_out.to_netcdf(netcdf_sim_path)

    # Final plot saved as PNG with colormap overlay
    speed_mag = np.sqrt(u[:, :, 0]**2 + v[:, :, 0]**2)
    plt.figure(figsize=(7, 5))
    im = plt.pcolormesh(lon, lat, speed_mag.T, shading='auto', cmap='viridis')
    plt.quiver(lon, lat, u[:, :, 0].T, v[:, :, 0].T, scale=10, color='white')
    plt.colorbar(im, label='Speed (m/s)')
    plt.title("Final Surface Currents")
    plt.xlabel("Longitude")
    plt.ylabel("Latitude")
    plt.tight_layout()
    plt.savefig(out_path)
    plt.close()

    speed_avg = np.sqrt(np.mean(u**2, axis=2) + np.mean(v**2, axis=2))
    plt.figure(figsize=(7, 5))
    im = plt.pcolormesh(lon, lat, speed_avg.T, shading='auto', cmap='plasma')
    plt.colorbar(im, label='Depth-averaged speed (m/s)')
    plt.title("Depth-Averaged Speed")
    plt.xlabel("Longitude")
    plt.ylabel("Latitude")
    plt.tight_layout()
    plt.savefig(avg_speed)
    plt.close()

    open_file(out_path)
    open_file(netcdf_sim_path)
    open_file(avg_speed)
    if animate:
        open_file(gif_path)
        open_file(mp4_path)

    return out_path, netcdf_sim_path, avg_speed, gif_path, mp4_path

# Entry point

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run 3D ocean simulation.")
    parser.add_argument("--bathymetry", type=str, default=None, help="Path to bathymetry NetCDF file")
    parser.add_argument("--no-animation", action="store_true", help="Disable animation output")
    args = parser.parse_args()

    image_file, nc_file, avg_speed_file, gif_file, mp4_file = run_3d_simulation(
        nc_path=args.bathymetry,
        animate=not args.no_animation
    )

    print("Simulation complete.")
    print(f"Images saved: {image_file} and {avg_speed_file}\nNetCDF saved: {nc_file}\nGIF: {gif_file}\nMP4: {mp4_file}")
